{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vinnare Documentation Product Overview Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla vehicula, urna sed tincidunt vestibulum, velit quam feugiat nisi, et placerat lectus neque at sapien. How to Run the Project To run the project, ensure you are in the root folder . Using Docker: docker build . -f ./Api/Dockerfile Running Locally: dotnet restore dotnet build dotnet Api/bin/Debug/net8.0/Api.dll Documentation Structure This documentation is organized into multiple sections: How to Run the Project CI/CD Pipelines Diagrams Technical Issues Code Features Refer to the respective pages for detailed information.","title":"Vinnare Documentation"},{"location":"#vinnare-documentation","text":"","title":"Vinnare Documentation"},{"location":"#product-overview","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla vehicula, urna sed tincidunt vestibulum, velit quam feugiat nisi, et placerat lectus neque at sapien.","title":"Product Overview"},{"location":"#how-to-run-the-project","text":"To run the project, ensure you are in the root folder .","title":"How to Run the Project"},{"location":"#using-docker","text":"docker build . -f ./Api/Dockerfile","title":"Using Docker:"},{"location":"#running-locally","text":"dotnet restore dotnet build dotnet Api/bin/Debug/net8.0/Api.dll","title":"Running Locally:"},{"location":"#documentation-structure","text":"This documentation is organized into multiple sections: How to Run the Project CI/CD Pipelines Diagrams Technical Issues Code Features Refer to the respective pages for detailed information.","title":"Documentation Structure"},{"location":"features/","text":"","title":"Features"},{"location":"how_to_run/","text":"","title":"How to run"},{"location":"technical_issues/","text":"","title":"Technical issues"},{"location":"code/ci_cd/","text":"CI/CD Pipelines Overview The CI/CD pipeline automates the process of building, testing, and deploying the application using GitHub Actions . It consists of two workflows: CI Workflow ( ci.yml ) : Triggers on pushes to the actions branch and pull requests to main . Builds a Docker image from the Api/Dockerfile . Runs tests (currently a placeholder for future implementation). Pushes the Docker image to AWS ECR, tagging it with the commit hash. Passes the image tag to the deployment pipeline. CD Workflow ( cd.yml ) : Called by the CI pipeline after a successful build and push. Runs on an EC2 instance via SSH. Pulls the latest Docker image from ECR. Stops and removes the previous container. Deploys the new image as a running container. Secrets and Security AWS credentials and repository details are stored as GitHub secrets. The EC2 server's SSH credentials are securely stored and accessed only during deployment. Reasoning Why GitHub Actions? Cloud Advantages : No need to manage CI/CD infrastructure. Seamless Secret Management : Integrates easily with GitHub Secrets. Simplicity & Integration : Works natively with GitHub repositories. Why Two Pipelines? Separation of Concerns : CI (build, test, push) and CD (deploy) are handled separately. Better Modularity : Allows independent improvements and debugging of CI/CD stages. Secrets and Security AWS credentials and repository details are stored as GitHub secrets. The EC2 server's SSH credentials are securely stored and accessed only during deployment. Future Improvements Implement automated testing in the CI pipeline. Add monitoring and alerting for deployment failures. Improve rollback strategies in case of failed deployments.","title":"CI/CD Pipelines"},{"location":"code/ci_cd/#cicd-pipelines","text":"","title":"CI/CD Pipelines"},{"location":"code/ci_cd/#overview","text":"The CI/CD pipeline automates the process of building, testing, and deploying the application using GitHub Actions . It consists of two workflows: CI Workflow ( ci.yml ) : Triggers on pushes to the actions branch and pull requests to main . Builds a Docker image from the Api/Dockerfile . Runs tests (currently a placeholder for future implementation). Pushes the Docker image to AWS ECR, tagging it with the commit hash. Passes the image tag to the deployment pipeline. CD Workflow ( cd.yml ) : Called by the CI pipeline after a successful build and push. Runs on an EC2 instance via SSH. Pulls the latest Docker image from ECR. Stops and removes the previous container. Deploys the new image as a running container.","title":"Overview"},{"location":"code/ci_cd/#secrets-and-security","text":"AWS credentials and repository details are stored as GitHub secrets. The EC2 server's SSH credentials are securely stored and accessed only during deployment.","title":"Secrets and Security"},{"location":"code/ci_cd/#reasoning","text":"","title":"Reasoning"},{"location":"code/ci_cd/#why-github-actions","text":"Cloud Advantages : No need to manage CI/CD infrastructure. Seamless Secret Management : Integrates easily with GitHub Secrets. Simplicity & Integration : Works natively with GitHub repositories.","title":"Why GitHub Actions?"},{"location":"code/ci_cd/#why-two-pipelines","text":"Separation of Concerns : CI (build, test, push) and CD (deploy) are handled separately. Better Modularity : Allows independent improvements and debugging of CI/CD stages.","title":"Why Two Pipelines?"},{"location":"code/ci_cd/#secrets-and-security_1","text":"AWS credentials and repository details are stored as GitHub secrets. The EC2 server's SSH credentials are securely stored and accessed only during deployment.","title":"Secrets and Security"},{"location":"code/ci_cd/#future-improvements","text":"Implement automated testing in the CI pipeline. Add monitoring and alerting for deployment failures. Improve rollback strategies in case of failed deployments.","title":"Future Improvements"},{"location":"code/code/","text":"","title":"Code"},{"location":"diagrams/diagrams/","text":"","title":"Diagrams"}]}